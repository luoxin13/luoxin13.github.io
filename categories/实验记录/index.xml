<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>实验记录 on Xin Luo&#39;s Blog</title>
    <link>https://luoxin13.github.io/categories/%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/</link>
    <description>Recent content in 实验记录 on Xin Luo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Apr 2022 11:29:02 +0800</lastBuildDate><atom:link href="https://luoxin13.github.io/categories/%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>元学习</title>
      <link>https://luoxin13.github.io/posts/notes-on-meta-learning/</link>
      <pubDate>Thu, 07 Apr 2022 11:29:02 +0800</pubDate>
      
      <guid>https://luoxin13.github.io/posts/notes-on-meta-learning/</guid>
      <description>什么是元学习？  进入智能化时代，人工智能的终极目标也正是让机器拥有人的智能。在人类拥有的众多能力中，最重要的能力当属学习能力，正是学习能力让人类能够不断掌握新的知识和技能，支持生命活动。因此，让机器学会学习是实现人工智能的主要目标，在机器学习中出现的元学习概念正试图实现这一目标。元学习由不同层次的学习抽象而成，使得目标机器学习系统能够通过学习自己的主要组件（例如优化器、损失函数、初始化方式、模型架构等）对自己的学习能力进行改进，故而元学习也被称为&amp;quot;学会如何学习 (learning to learn)&amp;quot;。
元学习通常将学习过程抽象为两个或更多层次：在最内层，模型学习任务相关的知识（例如在新的数据集上对模型进行精调）；在最外层，模型则需要学习&amp;quot;跨任务&amp;quot;知识（例如通过学习在不同任务之间进行迁移）。若最内层的组件存在可学习参数，则最外层优化时可以通过对这些组件进行&amp;quot;元学习&amp;quot;，进而能够对这些最内层的组件进行自动化学习。
   模型无关的元学习 MAML, Model-Agnostic Meta-Learning  MAML 是一个经典的元学习框架，模型学习神经网络的参数 $\theta$（初始化为 $\theta=\theta_0$）。针对特定任务的支持集（Support Set）$\mathcal{S}={x_S,y_S}$，元学习先利用较少次数（$N=1\ldots 5$）的标准SGD算法对模型进行优化，然后通过二次学习得到对任务的目标集（Target Set）$\mathcal{T}={x_T,y_T}$ 泛化性能较好的模型参数。
具体来说，在元学习任务中，给定一个任务，任务由支持集和目标集两个集合组成，其中的支持集由若干批量的输入-输出对（${x_S,y_S}$）组成，目标集则是一个小数量的验证集合，同样由输入-输出对（${x_T,y_T}$）组成。任务开始时，元学习得到初始化的模型参数 $\theta_0=\theta$。然后，开始进行内层循环的优化（inner loop optimization）：从第一个步骤开始，在每个步骤 $i$， 神经网络 $f$ 的参数设置为 $\theta_{i-1}$，接受此时的支持集作为输入，输出当前的预测结果 $f(x_s;\theta_{i-1})$，将该预测结果与支持集的标签一起，由定义的损失函数 $L$， 计算得到支持集的损失 $L_{i-1}^S$；此时，可用当前的损失对应的梯度，由 SGD 算法更新模型参数，得到当前步骤的模型参数 $\theta_{i}=\theta_{i-1}-\alpha$</description>
    </item>
    
  </channel>
</rss>
